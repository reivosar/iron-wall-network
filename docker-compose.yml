services:
  certificate-generator:
    build:
      context: ./certs
      dockerfile: Dockerfile
    container_name: certificate_generator
    volumes:
      - ./certs/ssl:/certs/ssl:rw
      - ./certs/cosign:/certs/cosign:rw
    environment:
      - COSIGN_VERSION=latest
    command: ["/bin/sh", "/usr/local/bin/generate-certs.sh"]

  reverse-proxy:
    depends_on:
      - certificate-generator
      - backend-api
      - grafana
      - prometheus
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
        - BACKEND_API_PORT=${BACKEND_API_PORT}
        - PROMETHEUS_PORT=${PROMETHEUS_PORT}
        - GRAFANA_PORT=${GRAFANA_PORT}
        - CADVISOR_PORT=${CADVISOR_PORT}
    container_name: nginx_proxy
    volumes:
      - ./certs/ssl:/certs/ssl:ro
      - logs:/logs
    env_file:
      - .env
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
      - "${NGINX_SSL_PORT}:${NGINX_SSL_PORT}"
    networks:
      - backend
    command: ["/bin/sh", "/setup-proxy-certificates.sh"]

  cosign-sign:
    depends_on:
      - certificate-generator
      - backend-api
      - backend-event-streamer
      - alert-manager
      - reverse-proxy
    build:
      context: ./cosign-sign
      dockerfile: Dockerfile
      args:
        - COSIGN_VERSION=${COSIGN_VERSION}
    container_name: cosign_sign
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs/cosign:/certs/cosign:ro
    environment:
      - COSIGN_PRIVATE_KEY_PATH=/certs/cosign/cosign.key
      - COSIGN_PUBLIC_KEY_PATH=/certs/cosign/cosign.pub
    networks:
      - backend
    command: ["/bin/sh", "/cosign_setup_and_sign.sh"]

  alert-manager:
    build:
      context: ./alert-manager
      dockerfile: Dockerfile
      args:
        - ALERT_MANAGER_VERSION=${ALERT_MANAGER_VERSION}
    container_name: alert_manager
    ports:
      - "${ALERT_MANAGER_PORT}:${ALERT_MANAGER_PORT}"
    restart: always
    volumes:
      - alertmanager_config:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      [
        "--config.file=/etc/alertmanager/config.yaml",
        "--web.listen-address=:${ALERT_MANAGER_PORT}",
      ]

  alert-notifier:
    depends_on:
      - alert-manager
    build:
      context: ./alert-notifier
      dockerfile: Dockerfile
      args:
        - ALERT_NOTIFIER_VERSION=${ALERT_NOTIFIER_VERSION}
    container_name: alert_notifier
    volumes:
      - ./alert-notifier/logs:/var/log/alert-notifier:rw
    ports:
      - "${ALERT_NOTIFIER_PORT}:${ALERT_NOTIFIER_PORT}"
    restart: always
    command: ["python", "/app/alert_handler.py"]

  backend-api:
    depends_on:
      - db
      - message-broker
    build:
      context: ./backend-api
      args:
        - BACKEND_API_VERSION=${BACKEND_API_VERSION}
        - BACKEND_DB_USER=${BACKEND_DB_USER}
        - BACKEND_DB_PASSWORD=${BACKEND_DB_PASSWORD}
        - BACKEND_DB_HOST=${BACKEND_DB_HOST}
        - BACKEND_DB_NAME=${BACKEND_DB_NAME}
        - MESSAGE_BROKER_HOST=${MESSAGE_BROKER_HOST}
        - MESSAGE_BROKER_PORT=${MESSAGE_BROKER_PORT}
        - PASSWORD_SECRET_KEY=${PASSWORD_SECRET_KEY}
        - AUTH_KEY_SECRET_KEY=${AUTH_KEY_SECRET_KEY}
        - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
        - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
    container_name: backend_api
    env_file:
      - .env
    ports:
      - "${BACKEND_API_PORT}:${BACKEND_API_PORT}"
    networks:
      - backend
    command: ["stack", "exec", "backend-exe"]

  backend-event-streamer:
    depends_on:
      - db
      - message-broker
    build:
      context: ./backend-event-streamer
      args:
        - EVENT_STREAMER_VERSION=${EVENT_STREAMER_VERSION}
        - BACKEND_DB_USER=${BACKEND_DB_USER}
        - BACKEND_DB_PASSWORD=${BACKEND_DB_PASSWORD}
        - BACKEND_DB_HOST=${BACKEND_DB_HOST}
        - BACKEND_DB_NAME=${BACKEND_DB_NAME}
    container_name: backend_event_stremer
    env_file:
      - .env
    networks:
      - backend

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - BACKEND_DB_USER=${BACKEND_DB_USER}
        - BACKEND_DB_PASSWORD=${BACKEND_DB_PASSWORD}
        - BACKEND_DB_NAME=${BACKEND_DB_NAME}
        - PASSWORD_SECRET_KEY=${PASSWORD_SECRET_KEY}
        - AUTH_KEY_SECRET_KEY=${AUTH_KEY_SECRET_KEY}
    container_name: postgres_db
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  postgres-exporter:
    depends_on:
      - db
    build:
      context: ./postgres-exporter
      args:
        POSTGRES_EXPORTER_VERSION: ${POSTGRES_EXPORTER_VERSION}
    container_name: postgres_exporter
    environment:
      CONFIG_FILE: ""
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "${POSTGRES_EXPORTER_PORT}:${POSTGRES_EXPORTER_PORT}"
    networks:
      - backend

  message-broker:
    build:
      context: ./message-broker
      args:
        - MESSAGE_BROKER_VERSION=${MESSAGE_BROKER_VERSION}
    container_name: message_broker
    env_file:
      - .env
    environment:
      - STREAM_GROUPS=${STREAM_GROUPS}
    networks:
      - backend
    ports:
      - "${MESSAGE_BROKER_PORT}:${MESSAGE_BROKER_PORT}"
    volumes:
      - redis_data:/data
      - ./certs/ssl:/certs/ssl:ro
    command: ["/usr/local/bin/redis-entrypoint.sh"]

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
      args:
        - GRAFANA_VERSION=${GRAFANA_VERSION}
    container_name: grafana
    env_file:
      - .env
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    networks:
      - backend
    command: ["/run.sh"]

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
      args:
        - PROMETHEUS_VERSION=${PROMETHEUS_VERSION}
        - ALERT_MANAGER_PORT=${ALERT_MANAGER_PORT}
        - PROMETHEUS_PORT=${PROMETHEUS_PORT}
        - GRAFANA_PORT=${GRAFANA_PORT}
        - POSTGRES_EXPORTER_PORT=${POSTGRES_EXPORTER_PORT}
        - CADVISOR_PORT=${CADVISOR_PORT}
        - NODE_EXPORTER_PORT=${NODE_EXPORTER_PORT}
    container_name: prometheus
    env_file:
      - .env
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - backend
    command:
      [
        "--config.file=/etc/prometheus/prometheus.yml",
        "--web.listen-address=0.0.0.0:${PROMETHEUS_PORT}",
      ]

  trivy-scan:
    build:
      context: ./trivy-scan
      dockerfile: Dockerfile
      args:
        - TRIVYSCAN_VERSION=${TRIVYSCAN_VERSION}
    container_name: trivy_scan
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./trivy-scan/reports:/reports
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    networks:
      - backend
    depends_on:
      - backend-api
      - backend-event-streamer
      - message-broker

  cadvisor:
    build:
      context: ./cadvisor
      dockerfile: Dockerfile
      args:
        - CADVISOR_VERSION=${CADVISOR_VERSION}
    container_name: cadvisor
    env_file:
      - .env
    ports:
      - "${CADVISOR_PORT}:${CADVISOR_PORT}"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /etc/machine-id:/etc/machine-id:ro
    networks:
      - backend
    depends_on:
      - prometheus

  node-exporter:
    build:
      context: ./node-exporter
      dockerfile: Dockerfile
      args:
        - NODE_EXPORTER_VERSION=${NODE_EXPORTER_VERSION}
    container_name: node_exporter
    env_file:
      - .env
    ports:
      - "${NODE_EXPORTER_PORT}:${NODE_EXPORTER_PORT}"
    networks:
      - backend
    depends_on:
      - prometheus

  loki:
    build:
      context: ./loki
      dockerfile: Dockerfile
      args:
        - LOKI_VERSION=${LOKI_VERSION}
    container_name: loki
    ports:
      - "${LOKI_PORT}:${LOKI_PORT}"
    env_file:
      - .env
    volumes:
      - /tmp/loki:/tmp/loki:rw
    networks:
      - backend
    command:
      - --config.file=/etc/loki/loki-config.yaml
      - --config.expand-env=true

  promtail:
    build:
      context: ./promtail
      dockerfile: Dockerfile
      args:
        - PROMTAIL_VERSION=${PROMTAIL_VERSION}
    container_name: promtail
    ports:
      - "${PROMTAIL_PORT}:${PROMTAIL_PORT}"
    env_file:
      - .env
    volumes:
      - logs:/logs
    networks:
      - backend
    command:
      - --config.file=/etc/promtail/promtail-config.yaml
      - --config.expand-env=true

networks:
  backend:
    driver: bridge

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_config:
    driver: local
  alertmanager_data:
    driver: local
  logs:
    driver: local

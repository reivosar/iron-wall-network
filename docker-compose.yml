version: "3.8"

services:
  reverse-proxy:
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
    container_name: nginx_proxy
    env_file:
      - .env
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    depends_on:
      - backend-api
    networks:
      - backend
    command: ["nginx", "-g", "daemon off;"]

  backend-api:
    build:
      context: ./backend-api
      args:
        - BACKEND_API_VERSION=${BACKEND_API_VERSION}
        - BACKEND_DB_USER=${BACKEND_DB_USER}
        - BACKEND_DB_PASSWORD=${BACKEND_DB_PASSWORD}
        - BACKEND_DB_HOST=${BACKEND_DB_HOST}
        - BACKEND_DB_NAME=${BACKEND_DB_NAME}
        - MESSAGE_BROKER_HOST=${MESSAGE_BROKER_HOST}
        - MESSAGE_BROKER_PORT=${MESSAGE_BROKER_PORT}
    container_name: backend_api
    env_file:
      - .env
    ports:
      - "${BACKEND_API_PORT}:${BACKEND_API_PORT}"
    depends_on:
      - db
      - message-broker
    networks:
      - backend
    command: ["stack", "exec", "backend-exe"]

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - BACKEND_DB_USER=${BACKEND_DB_USER}
        - BACKEND_DB_PASSWORD=${BACKEND_DB_PASSWORD}
        - BACKEND_DB_NAME=${BACKEND_DB_NAME}
    container_name: postgres_db
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  postgres-exporter:
    build:
      context: ./postgres-exporter
      args:
        POSTGRES_EXPORTER_VERSION: ${POSTGRES_EXPORTER_VERSION}
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "${POSTGRES_EXPORTER_PORT}:${POSTGRES_EXPORTER_PORT}"
    networks:
      - backend
    depends_on:
      - db

  message-broker:
    build:
      context: ./message-broker
      args:
        - MESSAGE_BROKER_VERSION=${MESSAGE_BROKER_VERSION}
        - STREAM_GROUPS=${STREAM_GROUPS}
    container_name: message_broker
    env_file:
      - .env
    ports:
      - "${MESSAGE_BROKER_PORT}:${MESSAGE_BROKER_PORT}"
    networks:
      - backend
    command: ["/usr/local/bin/redis-entrypoint.sh"]

  elasticsearch:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
      args:
        - ELASTICSEARCH_VERSION=${ELASTICSEARCH_VERSION}
    container_name: es
    env_file:
      - .env
    ports:
      - "${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}"
    networks:
      - backend
    command: ["elasticsearch"]

  logstash:
    build:
      context: ./logstash
      dockerfile: Dockerfile
      args:
        - LOGSTASH_VERSION=${LOGSTASH_VERSION}
    container_name: logstash
    env_file:
      - .env
    ports:
      - "${LOGSTASH_PORT}:${LOGSTASH_PORT}"
    networks:
      - backend
    depends_on:
      - elasticsearch
    command: ["logstash", "-f", "/usr/share/logstash/pipeline/logstash.conf"]

  kibana:
    build:
      context: ./kibana
      dockerfile: Dockerfile
      args:
        - KIBANA_VERSION=${KIBANA_VERSION}
    container_name: kibana
    env_file:
      - .env
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    networks:
      - backend
    depends_on:
      - elasticsearch
    command: ["kibana"]

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
      args:
        - GRAFANA_VERSION=${GRAFANA_VERSION}
    container_name: grafana
    env_file:
      - .env
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    networks:
      - backend
    command: ["/run.sh"]

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
      args:
        - PROMETHEUS_VERSION=${PROMETHEUS_VERSION}
    container_name: prometheus
    env_file:
      - .env
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    command:
      [
        "--config.file=/etc/prometheus/prometheus.yml",
        "--web.listen-address=0.0.0.0:${PROMETHEUS_PORT}",
      ]

networks:
  backend:
    driver: bridge

volumes:
  db_data:

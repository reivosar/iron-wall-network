# Enable the ModSecurity engine
SecRuleEngine On

# Request and response body settings
# Enable request body inspection for detecting payloads in POST/PUT requests
SecRequestBodyAccess On
# Disable response body inspection to reduce overhead
SecResponseBodyAccess Off

# Audit log settings
# Define the location for the audit log file
SecAuditLog /var/log/modsecurity/audit.log
# Specify which parts of the request/response are logged
SecAuditLogParts ABIJDEFHZ
# Explanation of parts:
#   A: Audit log header
#   B: Request headers
#   I: Request body
#   J: Intermediary response headers
#   D: Response body (only if SecResponseBodyAccess is On)
#   E: Error messages
#   F: Final log entry
#   H: Trailer headers
#   Z: End of entry marker

# Custom rules for security threats

# Rule to detect SQL Injection in query parameters or request body
SecRule ARGS|REQUEST_BODY "@rx select.+from" \
    "id:1001,deny,status:403,log,msg:'SQL Injection detected in body'"
# Explanation:
#   This rule matches patterns commonly used in SQL Injection attacks.
#   Example: "SELECT * FROM users"

# Rule to detect XSS (Cross-Site Scripting) attacks in query parameters or request body
SecRule ARGS|REQUEST_BODY "@rx <script>" \
    "id:1002,deny,status:403,log,msg:'XSS attack detected in body'"
# Explanation:
#   Detects attempts to inject JavaScript via <script> tags.
#   Example: "<script>alert('XSS')</script>"

# Rule to block unsupported HTTP methods
SecRule REQUEST_METHOD "!^(GET|POST|PUT|DELETE)$" \
    "id:2003,deny,status:405,log,msg:'Invalid HTTP method detected'"
# Explanation:
#   Blocks HTTP methods not explicitly allowed (e.g., TRACE, OPTIONS).
#   Example: "TRACE /api HTTP/1.1"

# Rule to block requests with excessive arguments
SecRule &ARGS "@gt 10" \
    "id:2004,deny,status:403,log,msg:'Excessive arguments detected'"
# Explanation:
#   Limits the number of query parameters to mitigate abuse.
#   Example: "?arg1=1&arg2=2&...&arg11=11"

# Rule to block requests with suspicious User-Agent headers
SecRule REQUEST_HEADERS:User-Agent "curl|wget|python" \
    "id:2005,deny,status:403,log,msg:'Suspicious User-Agent detected'"
# Explanation:
#   Blocks requests from automated tools or scripts identified by their User-Agent header.
#   Example: "curl/7.68.0" or "python-requests/2.25.1"

# Include OWASP Core Rule Set (CRS)
# These rules provide additional protections against a wide range of web application vulnerabilities.
Include /usr/local/modsecurity-crs/crs-setup.conf
Include /usr/local/modsecurity-crs/rules/*.conf
# Explanation:
#   The OWASP CRS includes pre-defined rules for SQL Injection, XSS, protocol violations,
#   data leakage, and more. It serves as a strong foundation for securing web applications.